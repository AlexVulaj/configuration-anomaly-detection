// Code generated by MockGen. DO NOT EDIT.
// Source: chgm.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	cloudtrail "github.com/aws/aws-sdk-go/service/cloudtrail"
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	pagerduty "github.com/openshift/configuration-anomaly-detection/pkg/pagerduty"
	v10 "github.com/openshift/hive/apis/hive/v1"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddNote mocks base method.
func (m *MockService) AddNote(incidentID, noteContent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNote", incidentID, noteContent)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNote indicates an expected call of AddNote.
func (mr *MockServiceMockRecorder) AddNote(incidentID, noteContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNote", reflect.TypeOf((*MockService)(nil).AddNote), incidentID, noteContent)
}

// CreateNewAlert mocks base method.
func (m *MockService) CreateNewAlert(description string, details interface{}, serviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewAlert", description, details, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewAlert indicates an expected call of CreateNewAlert.
func (mr *MockServiceMockRecorder) CreateNewAlert(description, details, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewAlert", reflect.TypeOf((*MockService)(nil).CreateNewAlert), description, details, serviceID)
}

// DeleteCCAMLimitedSupportReason mocks base method.
func (m *MockService) DeleteCCAMLimitedSupportReason(clusterID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCCAMLimitedSupportReason", clusterID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCCAMLimitedSupportReason indicates an expected call of DeleteCCAMLimitedSupportReason.
func (mr *MockServiceMockRecorder) DeleteCCAMLimitedSupportReason(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCCAMLimitedSupportReason", reflect.TypeOf((*MockService)(nil).DeleteCCAMLimitedSupportReason), clusterID)
}

// DeleteCHGMLimitedSupportReason mocks base method.
func (m *MockService) DeleteCHGMLimitedSupportReason(clusterID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCHGMLimitedSupportReason", clusterID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCHGMLimitedSupportReason indicates an expected call of DeleteCHGMLimitedSupportReason.
func (mr *MockServiceMockRecorder) DeleteCHGMLimitedSupportReason(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCHGMLimitedSupportReason", reflect.TypeOf((*MockService)(nil).DeleteCHGMLimitedSupportReason), clusterID)
}

// ExtractServiceIDFromPayload mocks base method.
func (m *MockService) ExtractServiceIDFromPayload(payloadFilePath string, reader pagerduty.FileReader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractServiceIDFromPayload", payloadFilePath, reader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractServiceIDFromPayload indicates an expected call of ExtractServiceIDFromPayload.
func (mr *MockServiceMockRecorder) ExtractServiceIDFromPayload(payloadFilePath, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractServiceIDFromPayload", reflect.TypeOf((*MockService)(nil).ExtractServiceIDFromPayload), payloadFilePath, reader)
}

// GetClusterDeployment mocks base method.
func (m *MockService) GetClusterDeployment(clusterID string) (*v10.ClusterDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterDeployment", clusterID)
	ret0, _ := ret[0].(*v10.ClusterDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterDeployment indicates an expected call of GetClusterDeployment.
func (mr *MockServiceMockRecorder) GetClusterDeployment(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterDeployment", reflect.TypeOf((*MockService)(nil).GetClusterDeployment), clusterID)
}

// GetClusterInfo mocks base method.
func (m *MockService) GetClusterInfo(identifier string) (*v1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterInfo", identifier)
	ret0, _ := ret[0].(*v1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterInfo indicates an expected call of GetClusterInfo.
func (mr *MockServiceMockRecorder) GetClusterInfo(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterInfo", reflect.TypeOf((*MockService)(nil).GetClusterInfo), identifier)
}

// GetEscalationPolicy mocks base method.
func (m *MockService) GetEscalationPolicy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEscalationPolicy")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEscalationPolicy indicates an expected call of GetEscalationPolicy.
func (mr *MockServiceMockRecorder) GetEscalationPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEscalationPolicy", reflect.TypeOf((*MockService)(nil).GetEscalationPolicy))
}

// GetSilentPolicy mocks base method.
func (m *MockService) GetSilentPolicy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSilentPolicy")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSilentPolicy indicates an expected call of GetSilentPolicy.
func (mr *MockServiceMockRecorder) GetSilentPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSilentPolicy", reflect.TypeOf((*MockService)(nil).GetSilentPolicy))
}

// ListNonRunningInstances mocks base method.
func (m *MockService) ListNonRunningInstances(infraID string) ([]*ec2.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNonRunningInstances", infraID)
	ret0, _ := ret[0].([]*ec2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNonRunningInstances indicates an expected call of ListNonRunningInstances.
func (mr *MockServiceMockRecorder) ListNonRunningInstances(infraID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNonRunningInstances", reflect.TypeOf((*MockService)(nil).ListNonRunningInstances), infraID)
}

// ListRunningInstances mocks base method.
func (m *MockService) ListRunningInstances(infraID string) ([]*ec2.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunningInstances", infraID)
	ret0, _ := ret[0].([]*ec2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunningInstances indicates an expected call of ListRunningInstances.
func (mr *MockServiceMockRecorder) ListRunningInstances(infraID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunningInstances", reflect.TypeOf((*MockService)(nil).ListRunningInstances), infraID)
}

// MoveToEscalationPolicy mocks base method.
func (m *MockService) MoveToEscalationPolicy(incidentID, escalationPolicyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveToEscalationPolicy", incidentID, escalationPolicyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveToEscalationPolicy indicates an expected call of MoveToEscalationPolicy.
func (mr *MockServiceMockRecorder) MoveToEscalationPolicy(incidentID, escalationPolicyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveToEscalationPolicy", reflect.TypeOf((*MockService)(nil).MoveToEscalationPolicy), incidentID, escalationPolicyID)
}

// PollInstanceStopEventsFor mocks base method.
func (m *MockService) PollInstanceStopEventsFor(instances []*ec2.Instance, retryTimes int) ([]*cloudtrail.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollInstanceStopEventsFor", instances, retryTimes)
	ret0, _ := ret[0].([]*cloudtrail.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollInstanceStopEventsFor indicates an expected call of PollInstanceStopEventsFor.
func (mr *MockServiceMockRecorder) PollInstanceStopEventsFor(instances, retryTimes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollInstanceStopEventsFor", reflect.TypeOf((*MockService)(nil).PollInstanceStopEventsFor), instances, retryTimes)
}

// PostCHGMLimitedSupportReason mocks base method.
func (m *MockService) PostCHGMLimitedSupportReason(clusterID string) (*v1.LimitedSupportReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCHGMLimitedSupportReason", clusterID)
	ret0, _ := ret[0].(*v1.LimitedSupportReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCHGMLimitedSupportReason indicates an expected call of PostCHGMLimitedSupportReason.
func (mr *MockServiceMockRecorder) PostCHGMLimitedSupportReason(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCHGMLimitedSupportReason", reflect.TypeOf((*MockService)(nil).PostCHGMLimitedSupportReason), clusterID)
}
